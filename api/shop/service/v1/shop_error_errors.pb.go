// Code generated by protoc-gen-go-errors. DO NOT EDIT.

package v1

import (
	fmt "fmt"
	errors "github.com/go-kratos/kratos/v2/errors"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the kratos package it is being compiled against.
const _ = errors.SupportPackageIsVersion1

func IsShopRecordNotFound(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ShopServiceErrorReason_SHOP_RECORD_NOT_FOUND.String() && e.Code == 404
}

func ErrorShopRecordNotFound(format string, args ...interface{}) *errors.Error {
	return errors.New(404, ShopServiceErrorReason_SHOP_RECORD_NOT_FOUND.String(), fmt.Sprintf(format, args...))
}

func IsShopContentMissing(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ShopServiceErrorReason_SHOP_CONTENT_MISSING.String() && e.Code == 400
}

func ErrorShopContentMissing(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ShopServiceErrorReason_SHOP_CONTENT_MISSING.String(), fmt.Sprintf(format, args...))
}

func IsShopDuplicateEntry(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ShopServiceErrorReason_SHOP_DUPLICATE_ENTRY.String() && e.Code == 400
}

func ErrorShopDuplicateEntry(format string, args ...interface{}) *errors.Error {
	return errors.New(400, ShopServiceErrorReason_SHOP_DUPLICATE_ENTRY.String(), fmt.Sprintf(format, args...))
}

func IsShopPermitionDenied(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ShopServiceErrorReason_SHOP_PERMITION_DENIED.String() && e.Code == 401
}

func ErrorShopPermitionDenied(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ShopServiceErrorReason_SHOP_PERMITION_DENIED.String(), fmt.Sprintf(format, args...))
}

func IsShopInvalidToken(err error) bool {
	if err == nil {
		return false
	}
	e := errors.FromError(err)
	return e.Reason == ShopServiceErrorReason_SHOP_INVALID_TOKEN.String() && e.Code == 401
}

func ErrorShopInvalidToken(format string, args ...interface{}) *errors.Error {
	return errors.New(401, ShopServiceErrorReason_SHOP_INVALID_TOKEN.String(), fmt.Sprintf(format, args...))
}
